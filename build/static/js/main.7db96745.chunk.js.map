{"version":3,"sources":["components/Todo.js","actions/index.js","reducers/index.js","index.js"],"names":["App","styled","main","_templateObject","TodoList","ul","_templateObject2","TodoItem","li","_templateObject3","TodoApp","state","newTodo","handleChanges","e","_this","setState","target","value","addTodoToList","preventDefault","props","addTodo","toggleCompleted","id","deleteTodo","_this2","this","react_default","a","createElement","className","todoList","map","item","i","key","onClick","concat","completed","todoItem","type","name","onChange","placeholder","Component","connect","todoItems","payload","console","log","initialState","title","reducer","arguments","length","undefined","action","newtodoItem","Date","now","Object","objectSpread","toConsumableArray","filter","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","Todo","document","getElementById"],"mappings":"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","file":"static/js/main.7db96745.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { addTodo, deleteTodo, toggleCompleted } from '../actions'\n\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\nconst App = styled.main`\n  margin: 0 auto;\n  max-width: 400px;\n`\n\nconst TodoList = styled.ul``\n\nconst TodoItem = styled.li`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  margin-bottom: 0.25rem;\n  div {\n    width: 100%;\n    margin-left: 1rem;\n    text-align: left;\n  }\n  .item-completed {\n    text-decoration: line-through;\n  }\n`\n\nclass TodoApp extends Component {\n  state = {\n    newTodo: '',\n  }\n\n  handleChanges = e => {\n    this.setState({ newTodo: e.target.value })\n  }\n\n  addTodoToList = e => {\n    e.preventDefault()\n    this.props.addTodo(this.state.newTodo)\n    this.setState({ newTodo: '' })\n  }\n\n  toggleCompleted = id => {\n    this.props.toggleCompleted(id)\n  }\n\n  deleteTodo = id => {\n    this.props.deleteTodo(id)\n  }\n\n  render() {\n    return (\n      <App className='container'>\n        <section className='hero'>\n          <div className='hero-body'>\n            <h1 className='title'>Redux Todos</h1>\n          </div>\n        </section>\n\n        <TodoList>\n          {this.props.todoList.map((item, i) => (\n            <TodoItem key={i}>\n              <button\n                className='button is-small is-success is-outlined'\n                onClick={() => this.toggleCompleted(item.id)}>\n                +\n              </button>\n              <div\n                onClick={() => this.toggleCompleted(item.id)}\n                className={`${item.completed ? 'item-completed' : null}`}>\n                {item.todoItem}\n              </div>\n              <button\n                type='button'\n                className='button is-small is-danger'\n                onClick={() => this.deleteTodo(item.id)}>\n                x\n              </button>\n            </TodoItem>\n          ))}\n        </TodoList>\n\n        <div className='field is-grouped'>\n          <div className='control is-expanded'>\n            <input\n              className='input'\n              name='newTodo'\n              type='text'\n              value={this.state.newTodo}\n              onChange={this.handleChanges}\n              placeholder='Add a new Todo'\n            />\n          </div>\n          <div className='control'>\n            <button className='button is-success' onClick={this.addTodoToList}>\n              Add Todo\n            </button>\n          </div>\n        </div>\n      </App>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  todoList: state.todoItems,\n})\n\nexport default connect(\n  mapStateToProps,\n  { addTodo, toggleCompleted, deleteTodo }\n)(TodoApp)\n","export const ADD_TODO = 'ADD_TODO'\nexport const TOGGLE_COMPLETED = 'TOGGLE_COMPLETED'\nexport const DELETE_TODO = 'DELETE_TODO'\n\nexport const addTodo = todoItem => {\n  return {\n    type: ADD_TODO,\n    payload: todoItem,\n  }\n}\n\nexport const toggleCompleted = id => {\n  console.log('toggle completed', id)\n  return {\n    type: TOGGLE_COMPLETED,\n    payload: id,\n  }\n}\n\nexport const deleteTodo = id => {\n  console.log('delete todo', id)\n  return {\n    type: DELETE_TODO,\n    payload: id,\n  }\n}\n","import { ADD_TODO, DELETE_TODO, TOGGLE_COMPLETED } from '../actions'\n\n//Step 1: Create store and initial list of todo Items\nconst initialState = {\n  title: 'Todo List',\n  todoItems: [\n    { todoItem: 'Find a girlfriend', completed: false, id: 1 },\n    { todoItem: 'not lose girlfriend', completed: false, id: 2 },\n  ],\n}\n\n//Step 2: Create reducer function and pass into createStore\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TODO:\n      const newtodoItem = {\n        todoItem: action.payload,\n        id: Date.now(),\n        completed: false,\n      }\n      return {\n        ...state,\n        todoItems: [...state.todoItems, newtodoItem],\n      }\n\n    case TOGGLE_COMPLETED:\n      return {\n        ...state,\n        todoItems: state.todoItems.map(item =>\n          item.id === action.payload\n            ? { ...item, completed: !item.completed }\n            : item\n        ),\n      }\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todoItems: state.todoItems.filter(\n          item => !(item.id === action.payload)\n        ),\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","import 'bulma/css/bulma.css'\n\nimport { Provider } from 'react-redux' //gives us access to Provider Component, which makes our app aware of store\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport TodoApp from './components/Todo'\nimport { createStore } from 'redux' //gives us access to createStore function from redux\nimport reducer from './reducers'\n\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n) //createStore function receives reducer responsible for updating the store, along with any initial state\n\n//Provider is where store lives and it makes our app aware of store, by wrapping our component inside of it\nReactDOM.render(\n  <Provider store={store}>\n    <TodoApp />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}